'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _GridShape = require('./GridShape');

var _GridShape2 = _interopRequireDefault(_GridShape);

var _Layout = require('./Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _GridGenerator = require('./GridGenerator');

var _GridGenerator2 = _interopRequireDefault(_GridGenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _React$PropTypes = _react2.default.PropTypes;
var number = _React$PropTypes.number;
var object = _React$PropTypes.object;
var bool = _React$PropTypes.bool;

var HexaGrid = function (_React$Component) {
  _inherits(HexaGrid, _React$Component);

  function HexaGrid(props) {
    _classCallCheck(this, HexaGrid);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(HexaGrid).call(this, props));

    _this.state = {
      hexagons: [],
      layout: null
    };
    return _this;
  }

  _createClass(HexaGrid, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var s = this.props.layoutSize;
      var layout = new _Layout2.default(s.width, s.height, this.props.flat, this.props.origin);
      var hexagons = _GridGenerator2.default.generateHexagon(2);

      this.setState({
        hexagons: hexagons,
        layout: layout
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_GridShape2.default, { width: this.props.width, height: this.props.height, hexagons: this.state.hexagons, layout: this.state.layout });
    }
  }]);

  return HexaGrid;
}(_react2.default.Component);

HexaGrid.propTypes = {
  width: number.isRequired,
  height: number.isRequired,
  layoutSize: object.isRequired,
  flat: bool,
  origin: object
};

HexaGrid.defaultProps = {
  width: 800,
  height: 600,
  flat: true
};

exports.default = HexaGrid;